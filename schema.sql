CREATE TABLE users (
  id INTEGER PRIMARY KEY,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  username TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL,
  role TEXT NOT NULL
);

CREATE TABLE races (
  id INTEGER PRIMARY KEY,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  userId INTEGER NOT NULL,
  playerId INTEGER,
  name TEXT NOT NULL,
  pluralName TEXT NOT NULL,
  prt TEXT,
  lrts INTEGER,
  habLowGrav INTEGER,
  habLowTemp INTEGER,
  habLowRad INTEGER,
  habHighGrav INTEGER,
  habHighTemp INTEGER,
  habHighRad INTEGER,
  growthRate INTEGER,
  popEfficiency INTEGER,
  factoryOutput INTEGER,
  factoryCost INTEGER,
  numFactories INTEGER,
  factoriesCostLess NUMERIC,
  immuneGrav NUMERIC,
  immuneTemp NUMERIC,
  immuneRad NUMERIC,
  mineOutput INTEGER,
  mineCost INTEGER,
  numMines INTEGER,
  researchCostEnergy TEXT,
  researchCostWeapons TEXT,
  researchCostPropulsion TEXT,
  researchCostConstruction TEXT,
  researchCostElectronics TEXT,
  researchCostBiotechnology TEXT,
  techsStartHigh NUMERIC,
  spec TEXT,
  FOREIGN KEY (userId) REFERENCES users (id) ON DELETE CASCADE,
  FOREIGN KEY (playerId) REFERENCES players (id)
);
CREATE TABLE games (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  name TEXT NOT NULL,
  host_id INTEGER,
  quick_start_turns INTEGER,
  size text,
  density text,
  player_positions text,
  random_events numeric,
  computer_players_form_alliances numeric,
  public_player_scores numeric,
  start_mode text,
  year INTEGER,
  state text,
  open_player_slots INTEGER,
  num_players INTEGER,
  victory_condition_conditions text,
  victory_condition_num_criteria_required INTEGER,
  victory_condition_years_passed INTEGER,
  victory_condition_own_planets INTEGER,
  victory_condition_attain_tech_level INTEGER,
  victory_condition_attain_tech_level_num_fields INTEGER,
  victory_condition_exceeds_score INTEGER,
  victory_condition_exceeds_second_place_score INTEGER,
  victory_condition_production_capacity INTEGER,
  victory_condition_own_capital_ships INTEGER,
  victory_condition_highest_score_after_years INTEGER,
  victor_declared numeric,
  rules text,
  area_x real,
  area_y real,
  PRIMARY KEY (id)
);
CREATE TABLE rules (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  game_id INTEGER,
  seed INTEGER,
  tachyon_cloak_reduction INTEGER,
  max_population INTEGER,
  fleets_scan_while_moving numeric,
  population_scanner_error real,
  smart_defense_coverage_factor real,
  invasion_defense_coverage_factor real,
  num_battle_rounds INTEGER,
  moves_to_run_away INTEGER,
  beam_range_dropoff real,
  torpedo_splash_damage real,
  salvage_decay_rate real,
  salvage_decay_min INTEGER,
  mine_field_cloak INTEGER,
  stargate_max_range_factor INTEGER,
  stargate_max_hull_mass_factor INTEGER,
  random_event_chances text,
  random_mineral_deposit_bonus_range text,
  wormhole_cloak INTEGER,
  wormhole_min_distance INTEGER,
  wormhole_stats_by_stability text,
  wormhole_pairs_for_size text,
  mine_field_stats_by_type text,
  repair_rates text,
  max_players INTEGER,
  starting_year INTEGER,
  show_public_scores_after_years INTEGER,
  planet_min_distance INTEGER,
  max_extra_world_distance INTEGER,
  min_extra_world_distance INTEGER,
  min_homeworld_mineral_concentration INTEGER,
  min_extra_planet_mineral_concentration INTEGER,
  min_mineral_concentration INTEGER,
  min_starting_mineral_concentration INTEGER,
  max_starting_mineral_concentration INTEGER,
  high_rad_germanium_bonus INTEGER,
  high_rad_germanium_bonus_threshold INTEGER,
  max_starting_mineral_surface INTEGER,
  min_starting_mineral_surface INTEGER,
  mineral_decay_factor INTEGER,
  starting_mines INTEGER,
  starting_factories INTEGER,
  starting_defenses INTEGER,
  race_starting_points INTEGER,
  scrap_mineral_amount real,
  scrap_resource_amount real,
  factory_cost_germanium INTEGER,
  defense_cost text,
  mineral_alchemy_cost INTEGER,
  terraform_cost text,
  starbase_component_cost_factor real,
  packet_decay_rate text,
  max_tech_level INTEGER,
  tech_base_cost text,
  prt_specs text,
  lrt_specs text,
  techs_id INTEGER,
  PRIMARY KEY (id)
);
CREATE TABLE players (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  game_id INTEGER,
  user_id INTEGER,
  name TEXT NOT NULL,
  num INTEGER,
  ready numeric,
  ai_controlled numeric,
  submitted_turn numeric,
  color text,
  default_hull_set INTEGER,
  race text,
  tech_levels_energy INTEGER,
  tech_levels_weapons INTEGER,
  tech_levels_propulsion INTEGER,
  tech_levels_construction INTEGER,
  tech_levels_electronics INTEGER,
  tech_levels_biotechnology INTEGER,
  tech_levels_spentenergy INTEGER,
  tech_levels_spentweapons INTEGER,
  tech_levels_spentpropulsion INTEGER,
  tech_levels_spentconstruction INTEGER,
  tech_levels_spentelectronics INTEGER,
  tech_levels_spentbiotechnology INTEGER,
  research_amount INTEGER,
  research_spent_last_year INTEGER,
  next_research_field text,
  researching text,
  production_plans text,
  transport_plans text,
  stats text,
  spec text,
  PRIMARY KEY (id)
);
CREATE TABLE player_messages (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  player_id INTEGER,
  type text,
  text text,
  target_map_object_num INTEGER,
  target_player_num INTEGER,
  target_type text,
  PRIMARY KEY (id),
  CONSTRAINT fk_players_messages FOREIGN KEY (player_id) REFERENCES players(id)
);
CREATE TABLE battle_plans (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  player_id INTEGER,
  name TEXT NOT NULL,
  primary_target text,
  secondary_target text,
  tactic text,
  attack_who text,
  PRIMARY KEY (id),
  CONSTRAINT fk_players_battle_plans FOREIGN KEY (player_id) REFERENCES players(id)
);
CREATE TABLE fleets (
  id INTEGER,
  game_id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  type text,
  player_id INTEGER,
  x real,
  y real,
  name TEXT NOT NULL,
  num INTEGER,
  player_num INTEGER,
  waypoints text,
  repeat_orders numeric,
  planet_id INTEGER,
  base_name TEXT NOT NULL,
  cargo_ironium INTEGER,
  cargo_boranium INTEGER,
  cargo_germanium INTEGER,
  cargo_colonists INTEGER,
  fuel INTEGER,
  damage INTEGER,
  battle_plan_id INTEGER,
  heading_x real,
  heading_y real,
  warp_speed INTEGER,
  previous_position_x real,
  previous_position_y real,
  orbiting_planet_num INTEGER,
  starbase numeric,
  spec text,
  PRIMARY KEY (id)
);
CREATE TABLE ship_designs (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  game_id INTEGER,
  player_id INTEGER,
  player_num INTEGER,
  dirty numeric,
  uuid text,
  name TEXT NOT NULL,
  version INTEGER,
  hull text,
  hull_set_number INTEGER,
  can_delete numeric,
  slots text,
  purpose text,
  spec text,
  PRIMARY KEY (id),
  CONSTRAINT fk_players_designs FOREIGN KEY (player_id) REFERENCES players(id)
);
CREATE TABLE ship_tokens (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  fleet_id INTEGER,
  design_id INTEGER,
  quantity INTEGER,
  PRIMARY KEY (id),
  CONSTRAINT fk_ship_tokens_design FOREIGN KEY (design_id) REFERENCES ship_designs(id),
  CONSTRAINT fk_fleets_tokens FOREIGN KEY (fleet_id) REFERENCES fleets(id)
);
CREATE TABLE planets (
  id INTEGER,
  game_id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  type text,
  player_id INTEGER,
  x real,
  y real,
  name TEXT NOT NULL,
  num INTEGER,
  player_num INTEGER,
  hab_grav INTEGER,
  hab_temp INTEGER,
  hab_rad INTEGER,
  base_hab_grav INTEGER,
  base_hab_temp INTEGER,
  base_hab_rad INTEGER,
  terraform_hab_grav INTEGER,
  terraform_hab_temp INTEGER,
  terraform_hab_rad INTEGER,
  mineral_conc_ironium INTEGER,
  mineral_conc_boranium INTEGER,
  mineral_conc_germanium INTEGER,
  mine_years_ironium INTEGER,
  mine_years_boranium INTEGER,
  mine_years_germanium INTEGER,
  cargo_ironium INTEGER,
  cargo_boranium INTEGER,
  cargo_germanium INTEGER,
  cargo_colonists INTEGER,
  mines INTEGER,
  factories INTEGER,
  defenses INTEGER,
  homeworld numeric,
  contributes_only_leftover_to_research numeric,
  scanner numeric,
  packet_speed INTEGER,
  production_queue text,
  spec text,
  PRIMARY KEY (id)
);
CREATE TABLE mineral_packets (
  id INTEGER,
  game_id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  type text,
  player_id INTEGER,
  x real,
  y real,
  name TEXT NOT NULL,
  num INTEGER,
  player_num INTEGER,
  target_planet_num INTEGER,
  cargo_ironium INTEGER,
  cargo_boranium INTEGER,
  cargo_germanium INTEGER,
  cargo_colonists INTEGER,
  safe_warp_speed INTEGER,
  warp_factor INTEGER,
  distance_travelled real,
  heading_x real,
  heading_y real,
  PRIMARY KEY (id)
);
CREATE TABLE salvages (
  id INTEGER,
  game_id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  type text,
  player_id INTEGER,
  x real,
  y real,
  name TEXT NOT NULL,
  num INTEGER,
  player_num INTEGER,
  cargo_ironium INTEGER,
  cargo_boranium INTEGER,
  cargo_germanium INTEGER,
  cargo_colonists INTEGER,
  PRIMARY KEY (id)
);
CREATE TABLE wormoholes (
  id INTEGER,
  game_id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  type text,
  player_id INTEGER,
  x real,
  y real,
  name TEXT NOT NULL,
  num INTEGER,
  player_num INTEGER,
  destination_num INTEGER,
  stability text,
  years_at_stability INTEGER,
  PRIMARY KEY (id)
);
CREATE TABLE mine_fields (
  id INTEGER,
  game_id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  type text,
  player_id INTEGER,
  x real,
  y real,
  name TEXT NOT NULL,
  num INTEGER,
  player_num INTEGER,
  num_mines INTEGER,
  detonate numeric,
  PRIMARY KEY (id)
);
CREATE TABLE planet_intels (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  game_id INTEGER,
  name TEXT NOT NULL,
  num INTEGER,
  player_num INTEGER,
  player_id INTEGER,
  report_age INTEGER,
  type text,
  x real,
  y real,
  hab_grav INTEGER,
  hab_temp INTEGER,
  hab_rad INTEGER,
  mineral_conc_ironium INTEGER,
  mineral_conc_boranium INTEGER,
  mineral_conc_germanium INTEGER,
  population INTEGER,
  cargo_ironium INTEGER,
  cargo_boranium INTEGER,
  cargo_germanium INTEGER,
  cargo_colonists INTEGER,
  cargo_discovered numeric,
  PRIMARY KEY (id),
  CONSTRAINT fk_players_planet_intels FOREIGN KEY (player_id) REFERENCES players(id)
);
CREATE TABLE fleet_intels (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  game_id INTEGER,
  name TEXT NOT NULL,
  num INTEGER,
  player_num INTEGER,
  player_id INTEGER,
  report_age INTEGER,
  type text,
  x real,
  y real,
  planet_intel_id INTEGER,
  cargo_ironium INTEGER,
  cargo_boranium INTEGER,
  cargo_germanium INTEGER,
  cargo_colonists INTEGER,
  cargo_discovered numeric,
  PRIMARY KEY (id),
  CONSTRAINT fk_planet_intels_starbase FOREIGN KEY (planet_intel_id) REFERENCES planet_intels(id),
  CONSTRAINT fk_players_fleet_intels FOREIGN KEY (player_id) REFERENCES players(id)
);
CREATE TABLE ship_design_intels (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  game_id INTEGER,
  name TEXT NOT NULL,
  num INTEGER,
  player_num INTEGER,
  player_id INTEGER,
  report_age INTEGER,
  uuid text,
  hull text,
  hull_set_number INTEGER,
  version INTEGER,
  armor INTEGER,
  shields INTEGER,
  slots text,
  PRIMARY KEY (id),
  CONSTRAINT fk_players_design_intels FOREIGN KEY (player_id) REFERENCES players(id)
);
CREATE TABLE mineral_packet_intels (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  game_id INTEGER,
  name TEXT NOT NULL,
  num INTEGER,
  player_num INTEGER,
  player_id INTEGER,
  report_age INTEGER,
  type text,
  x real,
  y real,
  warp_factor INTEGER,
  heading_x real,
  heading_y real,
  cargo_ironium INTEGER,
  cargo_boranium INTEGER,
  cargo_germanium INTEGER,
  cargo_colonists INTEGER,
  PRIMARY KEY (id),
  CONSTRAINT fk_players_mineral_packet_intels FOREIGN KEY (player_id) REFERENCES players(id)
);
CREATE TABLE mine_field_intels (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  game_id INTEGER,
  name TEXT NOT NULL,
  num INTEGER,
  player_num INTEGER,
  player_id INTEGER,
  report_age INTEGER,
  type text,
  x real,
  y real,
  num_mines INTEGER,
  PRIMARY KEY (id),
  CONSTRAINT fk_players_mine_field_intels FOREIGN KEY (player_id) REFERENCES players(id)
);
CREATE TABLE tech_stores (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  rules_id INTEGER,
  PRIMARY KEY (id)
);
CREATE TABLE tech_engines (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  tech_store_id INTEGER,
  name TEXT NOT NULL,
  cost_ironium INTEGER,
  cost_boranium INTEGER,
  cost_germanium INTEGER,
  cost_resources INTEGER,
  requirements_energy INTEGER,
  requirements_weapons INTEGER,
  requirements_propulsion INTEGER,
  requirements_construction INTEGER,
  requirements_electronics INTEGER,
  requirements_biotechnology INTEGER,
  requirements_prt_denied text,
  requirements_lr_ts_required INTEGER,
  requirements_lr_ts_denied INTEGER,
  requirements_prt_required text,
  ranking INTEGER,
  category text,
  hull_slot_type INTEGER,
  mass INTEGER,
  scan_range INTEGER,
  scan_range_pen INTEGER,
  safe_hull_mass INTEGER,
  safe_range INTEGER,
  max_hull_mass INTEGER,
  max_range INTEGER,
  radiating numeric,
  packet_speed INTEGER,
  cloak_units INTEGER,
  terraform_rate INTEGER,
  mining_rate INTEGER,
  kill_rate real,
  min_kill_rate INTEGER,
  structure_destroy_rate real,
  unterraform_rate INTEGER,
  smart numeric,
  can_steal_fleet_cargo numeric,
  can_steal_planet_cargo numeric,
  armor INTEGER,
  shield INTEGER,
  torpedo_bonus real,
  initiative_bonus INTEGER,
  beam_bonus real,
  reduce_movement INTEGER,
  torpedo_jamming real,
  reduce_cloaking numeric,
  cloak_unarmed_only numeric,
  mine_field_type text,
  mine_laying_rate INTEGER,
  beam_defense INTEGER,
  cargo_bonus INTEGER,
  colonization_module numeric,
  fuel_bonus INTEGER,
  movement_bonus INTEGER,
  orbital_construction_module numeric,
  power INTEGER,
  range INTEGER,
  initiative INTEGER,
  gattling numeric,
  hits_all_targets numeric,
  damage_shields_only numeric,
  fuel_regeneration_rate INTEGER,
  accuracy INTEGER,
  capital_ship_missile numeric,
  ideal_speed INTEGER,
  free_speed INTEGER,
  fuel_usage text,
  PRIMARY KEY (id),
  CONSTRAINT fk_tech_stores_engines FOREIGN KEY (tech_store_id) REFERENCES tech_stores(id)
);
CREATE TABLE tech_planetary_scanners (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  tech_store_id INTEGER,
  name TEXT NOT NULL,
  cost_ironium INTEGER,
  cost_boranium INTEGER,
  cost_germanium INTEGER,
  cost_resources INTEGER,
  requirements_energy INTEGER,
  requirements_weapons INTEGER,
  requirements_propulsion INTEGER,
  requirements_construction INTEGER,
  requirements_electronics INTEGER,
  requirements_biotechnology INTEGER,
  requirements_prt_denied text,
  requirements_lr_ts_required INTEGER,
  requirements_lr_ts_denied INTEGER,
  requirements_prt_required text,
  ranking INTEGER,
  category text,
  scan_range INTEGER,
  scan_range_pen INTEGER,
  PRIMARY KEY (id),
  CONSTRAINT fk_tech_stores_planetary_scanners FOREIGN KEY (tech_store_id) REFERENCES tech_stores(id)
);
CREATE TABLE tech_defenses (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  tech_store_id INTEGER,
  name TEXT NOT NULL,
  cost_ironium INTEGER,
  cost_boranium INTEGER,
  cost_germanium INTEGER,
  cost_resources INTEGER,
  requirements_energy INTEGER,
  requirements_weapons INTEGER,
  requirements_propulsion INTEGER,
  requirements_construction INTEGER,
  requirements_electronics INTEGER,
  requirements_biotechnology INTEGER,
  requirements_prt_denied text,
  requirements_lr_ts_required INTEGER,
  requirements_lr_ts_denied INTEGER,
  requirements_prt_required text,
  ranking INTEGER,
  category text,
  defense_coverage real,
  PRIMARY KEY (id),
  CONSTRAINT fk_tech_stores_defenses FOREIGN KEY (tech_store_id) REFERENCES tech_stores(id)
);
CREATE TABLE tech_hull_components (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  tech_store_id INTEGER,
  name TEXT NOT NULL,
  cost_ironium INTEGER,
  cost_boranium INTEGER,
  cost_germanium INTEGER,
  cost_resources INTEGER,
  requirements_energy INTEGER,
  requirements_weapons INTEGER,
  requirements_propulsion INTEGER,
  requirements_construction INTEGER,
  requirements_electronics INTEGER,
  requirements_biotechnology INTEGER,
  requirements_prt_denied text,
  requirements_lr_ts_required INTEGER,
  requirements_lr_ts_denied INTEGER,
  requirements_prt_required text,
  ranking INTEGER,
  category text,
  hull_slot_type INTEGER,
  mass INTEGER,
  scan_range INTEGER,
  scan_range_pen INTEGER,
  safe_hull_mass INTEGER,
  safe_range INTEGER,
  max_hull_mass INTEGER,
  max_range INTEGER,
  radiating numeric,
  packet_speed INTEGER,
  cloak_units INTEGER,
  terraform_rate INTEGER,
  mining_rate INTEGER,
  kill_rate real,
  min_kill_rate INTEGER,
  structure_destroy_rate real,
  unterraform_rate INTEGER,
  smart numeric,
  can_steal_fleet_cargo numeric,
  can_steal_planet_cargo numeric,
  armor INTEGER,
  shield INTEGER,
  torpedo_bonus real,
  initiative_bonus INTEGER,
  beam_bonus real,
  reduce_movement INTEGER,
  torpedo_jamming real,
  reduce_cloaking numeric,
  cloak_unarmed_only numeric,
  mine_field_type text,
  mine_laying_rate INTEGER,
  beam_defense INTEGER,
  cargo_bonus INTEGER,
  colonization_module numeric,
  fuel_bonus INTEGER,
  movement_bonus INTEGER,
  orbital_construction_module numeric,
  power INTEGER,
  range INTEGER,
  initiative INTEGER,
  gattling numeric,
  hits_all_targets numeric,
  damage_shields_only numeric,
  fuel_regeneration_rate INTEGER,
  accuracy INTEGER,
  capital_ship_missile numeric,
  PRIMARY KEY (id),
  CONSTRAINT fk_tech_stores_hull_components FOREIGN KEY (tech_store_id) REFERENCES tech_stores(id)
);
CREATE TABLE tech_hulls (
  id INTEGER,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENTTIMESTAMP,
  tech_store_id INTEGER,
  name TEXT NOT NULL,
  cost_ironium INTEGER,
  cost_boranium INTEGER,
  cost_germanium INTEGER,
  cost_resources INTEGER,
  requirements_energy INTEGER,
  requirements_weapons INTEGER,
  requirements_propulsion INTEGER,
  requirements_construction INTEGER,
  requirements_electronics INTEGER,
  requirements_biotechnology INTEGER,
  requirements_prt_denied text,
  requirements_lr_ts_required INTEGER,
  requirements_lr_ts_denied INTEGER,
  requirements_prt_required text,
  ranking INTEGER,
  category text,
  type text,
  mass INTEGER,
  armor INTEGER,
  fuel_capacity INTEGER,
  cargo_capacity INTEGER,
  space_dock INTEGER,
  mine_laying_factor INTEGER,
  built_in_scanner numeric,
  initiative INTEGER,
  repair_bonus real,
  immune_to_own_detonation numeric,
  range_bonus INTEGER,
  starbase numeric,
  orbital_construction_hull numeric,
  double_mine_efficiency numeric,
  innate_scan_range_pen_factor real,
  slots text,
  PRIMARY KEY (id),
  CONSTRAINT fk_tech_stores_hulls FOREIGN KEY (tech_store_id) REFERENCES tech_stores(id)
);