// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package dbsqlx

import game "github.com/sirgwain/craig-stars/game"

type GameConverter struct{}

func (c *GameConverter) ConvertGameRace(source *game.Race) *Race {
	var pDbsqlxRace *Race
	if source != nil {
		dbsqlxRace := c.gameRaceToDbsqlxRace(*source)
		pDbsqlxRace = &dbsqlxRace
	}
	return pDbsqlxRace
}
func (c *GameConverter) ConvertGameUser(source *game.User) *User {
	var pDbsqlxUser *User
	if source != nil {
		dbsqlxUser := c.gameUserToDbsqlxUser(*source)
		pDbsqlxUser = &dbsqlxUser
	}
	return pDbsqlxUser
}
func (c *GameConverter) ConvertRace(source Race) game.Race {
	var gameRace game.Race
	gameRace.ID = Int64ToUInt64(source.ID)
	gameRace.CreatedAt = TimeToTime(source.CreatedAt)
	gameRace.UpdatedAt = TimeToTime(source.UpdatedAt)
	gameRace.UserID = source.UserID
	var pUint64 *uint64
	if source.PlayerID != nil {
		xuint64 := *source.PlayerID
		pUint64 = &xuint64
	}
	gameRace.PlayerID = pUint64
	gameRace.Name = source.Name
	gameRace.PluralName = source.PluralName
	gameRace.PRT = game.PRT(source.PRT)
	gameRace.LRTs = game.Bitmask(source.LRTs)
	gameRace.HabLow = ExtendHabLow(source)
	gameRace.HabHigh = ExtendHabHigh(source)
	gameRace.GrowthRate = source.GrowthRate
	gameRace.PopEfficiency = source.PopEfficiency
	gameRace.FactoryOutput = source.FactoryOutput
	gameRace.FactoryCost = source.FactoryCost
	gameRace.NumFactories = source.NumFactories
	gameRace.FactoriesCostLess = source.FactoriesCostLess
	gameRace.ImmuneGrav = source.ImmuneGrav
	gameRace.ImmuneTemp = source.ImmuneTemp
	gameRace.ImmuneRad = source.ImmuneRad
	gameRace.MineOutput = source.MineOutput
	gameRace.MineCost = source.MineCost
	gameRace.NumMines = source.NumMines
	gameRace.ResearchCost = ExtendResearchCost(source)
	gameRace.TechsStartHigh = source.TechsStartHigh
	var pGameRaceSpec *game.RaceSpec
	if source.Spec != nil {
		gameRaceSpec := c.gameRaceSpecToGameRaceSpec(*source.Spec)
		pGameRaceSpec = &gameRaceSpec
	}
	gameRace.Spec = pGameRaceSpec
	return gameRace
}
func (c *GameConverter) ConvertRaces(source []Race) []game.Race {
	gameRaceList := make([]game.Race, len(source))
	for i := 0; i < len(source); i++ {
		gameRaceList[i] = c.ConvertRace(source[i])
	}
	return gameRaceList
}
func (c *GameConverter) ConvertUser(source User) game.User {
	var gameUser game.User
	gameUser.ID = source.ID
	gameUser.CreatedAt = TimeToTime(source.CreatedAt)
	gameUser.UpdatedAt = TimeToTime(source.UpdatedAt)
	gameUser.Username = source.Username
	gameUser.Password = source.Password
	gameUser.Role = game.Role(source.Role)
	return gameUser
}
func (c *GameConverter) ConvertUsers(source []User) []game.User {
	gameUserList := make([]game.User, len(source))
	for i := 0; i < len(source); i++ {
		gameUserList[i] = c.ConvertUser(source[i])
	}
	return gameUserList
}
func (c *GameConverter) gameCostToGameCost(source game.Cost) game.Cost {
	var gameCost game.Cost
	gameCost.Ironium = source.Ironium
	gameCost.Boranium = source.Boranium
	gameCost.Germanium = source.Germanium
	gameCost.Resources = source.Resources
	return gameCost
}
func (c *GameConverter) gameRaceSpecToGameRaceSpec(source game.RaceSpec) game.RaceSpec {
	var gameRaceSpec game.RaceSpec
	mapGameQueueItemTypeGameCost := make(map[game.QueueItemType]game.Cost, len(source.Costs))
	for key, value := range source.Costs {
		mapGameQueueItemTypeGameCost[game.QueueItemType(key)] = c.gameCostToGameCost(value)
	}
	gameRaceSpec.Costs = mapGameQueueItemTypeGameCost
	gameRaceSpec.StartingTechLevels = c.gameTechLevelToGameTechLevel(source.StartingTechLevels)
	gameStartingPlanetList := make([]game.StartingPlanet, len(source.StartingPlanets))
	for i := 0; i < len(source.StartingPlanets); i++ {
		gameStartingPlanetList[i] = c.gameStartingPlanetToGameStartingPlanet(source.StartingPlanets[i])
	}
	gameRaceSpec.StartingPlanets = gameStartingPlanetList
	gameRaceSpec.TechCostOffset = c.gameTechCostOffsetToGameTechCostOffset(source.TechCostOffset)
	gameRaceSpec.MineralsPerSingleMineralPacket = source.MineralsPerSingleMineralPacket
	gameRaceSpec.MineralsPerMixedMineralPacket = source.MineralsPerMixedMineralPacket
	gameRaceSpec.PacketResourceCost = source.PacketResourceCost
	gameRaceSpec.PacketMineralCostFactor = source.PacketMineralCostFactor
	gameRaceSpec.PacketReceiverFactor = source.PacketReceiverFactor
	gameRaceSpec.PacketDecayFactor = source.PacketDecayFactor
	gameRaceSpec.PacketOverSafeWarpPenalty = source.PacketOverSafeWarpPenalty
	gameRaceSpec.PacketBuiltInScanner = source.PacketBuiltInScanner
	gameRaceSpec.DetectPacketDestinationStarbases = source.DetectPacketDestinationStarbases
	gameRaceSpec.DetectAllPackets = source.DetectAllPackets
	gameRaceSpec.PacketTerraformChance = source.PacketTerraformChance
	gameRaceSpec.PacketPermaformChance = source.PacketPermaformChance
	gameRaceSpec.PacketPermaTerraformSizeUnit = source.PacketPermaTerraformSizeUnit
	gameRaceSpec.CanGateCargo = source.CanGateCargo
	gameRaceSpec.CanDetectStargatePlanets = source.CanDetectStargatePlanets
	gameRaceSpec.ShipsVanishInVoid = source.ShipsVanishInVoid
	gameRaceSpec.BuiltInScannerMultiplier = source.BuiltInScannerMultiplier
	gameRaceSpec.TechsCostExtraLevel = source.TechsCostExtraLevel
	gameRaceSpec.FreighterGrowthFactor = source.FreighterGrowthFactor
	gameRaceSpec.GrowthFactor = source.GrowthFactor
	gameRaceSpec.MaxPopulationOffset = source.MaxPopulationOffset
	gameRaceSpec.BuiltInCloakUnits = source.BuiltInCloakUnits
	gameRaceSpec.StealsResearch = c.gameTechLevelToGameTechLevel(source.StealsResearch)
	gameRaceSpec.FreeCargoCloaking = source.FreeCargoCloaking
	gameRaceSpec.MineFieldsAreScanners = source.MineFieldsAreScanners
	gameRaceSpec.MineFieldRateMoveFactor = source.MineFieldRateMoveFactor
	gameRaceSpec.MineFieldSafeWarpBonus = source.MineFieldSafeWarpBonus
	gameRaceSpec.MineFieldMinDecayFactor = source.MineFieldMinDecayFactor
	gameRaceSpec.MineFieldBaseDecayRate = source.MineFieldBaseDecayRate
	gameRaceSpec.MineFieldPlanetDecayRate = source.MineFieldPlanetDecayRate
	gameRaceSpec.MineFieldMaxDecayRate = source.MineFieldMaxDecayRate
	gameRaceSpec.CanDetonateMineFields = source.CanDetonateMineFields
	gameRaceSpec.MineFieldDetonateDecayRate = source.MineFieldDetonateDecayRate
	gameRaceSpec.DiscoverDesignOnScan = source.DiscoverDesignOnScan
	gameRaceSpec.CanRemoteMineOwnPlanets = source.CanRemoteMineOwnPlanets
	gameRaceSpec.InvasionAttackBonus = source.InvasionAttackBonus
	gameRaceSpec.InvasionDefendBonus = source.InvasionDefendBonus
	gameRaceSpec.MovementBonus = source.MovementBonus
	gameRaceSpec.Instaforming = source.Instaforming
	gameRaceSpec.PermaformChance = source.PermaformChance
	gameRaceSpec.PermaformPopulation = source.PermaformPopulation
	gameRaceSpec.RepairFactor = source.RepairFactor
	gameRaceSpec.StarbaseRepairFactor = source.StarbaseRepairFactor
	gameRaceSpec.InnateMining = source.InnateMining
	gameRaceSpec.InnateResources = source.InnateResources
	gameRaceSpec.InnateScanner = source.InnateScanner
	gameRaceSpec.InnatePopulationFactor = source.InnatePopulationFactor
	gameRaceSpec.CanBuildDefenses = source.CanBuildDefenses
	gameRaceSpec.LivesOnStarbases = source.LivesOnStarbases
	gameRaceSpec.NewTechCostFactor = source.NewTechCostFactor
	gameRaceSpec.MiniaturizationMax = source.MiniaturizationMax
	gameRaceSpec.MiniaturizationPerLevel = source.MiniaturizationPerLevel
	gameRaceSpec.NoAdvancedScanners = source.NoAdvancedScanners
	gameRaceSpec.ScanRangeFactor = source.ScanRangeFactor
	gameRaceSpec.FuelEfficiencyOffset = source.FuelEfficiencyOffset
	gameRaceSpec.TerraformCostOffset = c.gameCostToGameCost(source.TerraformCostOffset)
	gameRaceSpec.MineralAlchemyCostOffset = source.MineralAlchemyCostOffset
	gameRaceSpec.ScrapMineralOffset = source.ScrapMineralOffset
	gameRaceSpec.ScrapMineralOffsetStarbase = source.ScrapMineralOffsetStarbase
	gameRaceSpec.ScrapResourcesOffset = source.ScrapResourcesOffset
	gameRaceSpec.ScrapResourcesOffsetStarbase = source.ScrapResourcesOffsetStarbase
	gameRaceSpec.StartingPopulationFactor = source.StartingPopulationFactor
	gameRaceSpec.StarbaseBuiltInCloakUnits = source.StarbaseBuiltInCloakUnits
	gameRaceSpec.StarbaseCostFactor = source.StarbaseCostFactor
	gameRaceSpec.ResearchFactor = source.ResearchFactor
	gameRaceSpec.ResearchSplashDamage = source.ResearchSplashDamage
	gameRaceSpec.ShieldStrengthFactor = source.ShieldStrengthFactor
	gameRaceSpec.ShieldRegenerationRate = source.ShieldRegenerationRate
	gameRaceSpec.EngineFailureRate = source.EngineFailureRate
	gameRaceSpec.EngineReliableSpeed = source.EngineReliableSpeed
	return gameRaceSpec
}
func (c *GameConverter) gameRaceToDbsqlxRace(source game.Race) Race {
	var dbsqlxRace Race
	dbsqlxRace.ID = Uint64ToInt64(source.ID)
	dbsqlxRace.CreatedAt = TimeToTime(source.CreatedAt)
	dbsqlxRace.UpdatedAt = TimeToTime(source.UpdatedAt)
	dbsqlxRace.UserID = source.UserID
	var pUint64 *uint64
	if source.PlayerID != nil {
		xuint64 := *source.PlayerID
		pUint64 = &xuint64
	}
	dbsqlxRace.PlayerID = pUint64
	dbsqlxRace.Name = source.Name
	dbsqlxRace.PluralName = source.PluralName
	dbsqlxRace.PRT = game.PRT(source.PRT)
	dbsqlxRace.LRTs = game.Bitmask(source.LRTs)
	dbsqlxRace.HabLowGrav = source.HabLow.Grav
	dbsqlxRace.HabLowTemp = source.HabLow.Temp
	dbsqlxRace.HabLowRad = source.HabLow.Rad
	dbsqlxRace.HabHighGrav = source.HabHigh.Grav
	dbsqlxRace.HabHighTemp = source.HabHigh.Temp
	dbsqlxRace.HabHighRad = source.HabHigh.Rad
	dbsqlxRace.GrowthRate = source.GrowthRate
	dbsqlxRace.PopEfficiency = source.PopEfficiency
	dbsqlxRace.FactoryOutput = source.FactoryOutput
	dbsqlxRace.FactoryCost = source.FactoryCost
	dbsqlxRace.NumFactories = source.NumFactories
	dbsqlxRace.FactoriesCostLess = source.FactoriesCostLess
	dbsqlxRace.ImmuneGrav = source.ImmuneGrav
	dbsqlxRace.ImmuneTemp = source.ImmuneTemp
	dbsqlxRace.ImmuneRad = source.ImmuneRad
	dbsqlxRace.MineOutput = source.MineOutput
	dbsqlxRace.MineCost = source.MineCost
	dbsqlxRace.NumMines = source.NumMines
	dbsqlxRace.ResearchCostEnergy = game.ResearchCostLevel(source.ResearchCost.Energy)
	dbsqlxRace.ResearchCostWeapons = game.ResearchCostLevel(source.ResearchCost.Weapons)
	dbsqlxRace.ResearchCostPropulsion = game.ResearchCostLevel(source.ResearchCost.Propulsion)
	dbsqlxRace.ResearchCostConstruction = game.ResearchCostLevel(source.ResearchCost.Construction)
	dbsqlxRace.ResearchCostElectronics = game.ResearchCostLevel(source.ResearchCost.Electronics)
	dbsqlxRace.ResearchCostBiotechnology = game.ResearchCostLevel(source.ResearchCost.Biotechnology)
	dbsqlxRace.TechsStartHigh = source.TechsStartHigh
	var pGameRaceSpec *game.RaceSpec
	if source.Spec != nil {
		gameRaceSpec := c.gameRaceSpecToGameRaceSpec(*source.Spec)
		pGameRaceSpec = &gameRaceSpec
	}
	dbsqlxRace.Spec = pGameRaceSpec
	return dbsqlxRace
}
func (c *GameConverter) gameStartingFleetToGameStartingFleet(source game.StartingFleet) game.StartingFleet {
	var gameStartingFleet game.StartingFleet
	gameStartingFleet.Name = source.Name
	gameStartingFleet.HullName = game.StartingFleetHull(source.HullName)
	gameStartingFleet.HullSetNumber = source.HullSetNumber
	gameStartingFleet.Purpose = game.ShipDesignPurpose(source.Purpose)
	return gameStartingFleet
}
func (c *GameConverter) gameStartingPlanetToGameStartingPlanet(source game.StartingPlanet) game.StartingPlanet {
	var gameStartingPlanet game.StartingPlanet
	gameStartingPlanet.Population = source.Population
	gameStartingPlanet.HabPenaltyFactor = source.HabPenaltyFactor
	gameStartingPlanet.HasStargate = source.HasStargate
	gameStartingPlanet.HasMassDriver = source.HasMassDriver
	gameStartingPlanet.StarbaseDesignName = source.StarbaseDesignName
	gameStartingPlanet.StarbaseHull = source.StarbaseHull
	gameStartingFleetList := make([]game.StartingFleet, len(source.StartingFleets))
	for i := 0; i < len(source.StartingFleets); i++ {
		gameStartingFleetList[i] = c.gameStartingFleetToGameStartingFleet(source.StartingFleets[i])
	}
	gameStartingPlanet.StartingFleets = gameStartingFleetList
	return gameStartingPlanet
}
func (c *GameConverter) gameTechCostOffsetToGameTechCostOffset(source game.TechCostOffset) game.TechCostOffset {
	var gameTechCostOffset game.TechCostOffset
	gameTechCostOffset.Engine = source.Engine
	gameTechCostOffset.BeamWeapon = source.BeamWeapon
	gameTechCostOffset.Torpedo = source.Torpedo
	gameTechCostOffset.Bomb = source.Bomb
	gameTechCostOffset.PlanetaryDefense = source.PlanetaryDefense
	return gameTechCostOffset
}
func (c *GameConverter) gameTechLevelToGameTechLevel(source game.TechLevel) game.TechLevel {
	var gameTechLevel game.TechLevel
	gameTechLevel.Energy = source.Energy
	gameTechLevel.Weapons = source.Weapons
	gameTechLevel.Propulsion = source.Propulsion
	gameTechLevel.Construction = source.Construction
	gameTechLevel.Electronics = source.Electronics
	gameTechLevel.Biotechnology = source.Biotechnology
	return gameTechLevel
}
func (c *GameConverter) gameUserToDbsqlxUser(source game.User) User {
	var dbsqlxUser User
	dbsqlxUser.ID = source.ID
	dbsqlxUser.CreatedAt = TimeToTime(source.CreatedAt)
	dbsqlxUser.UpdatedAt = TimeToTime(source.UpdatedAt)
	dbsqlxUser.Username = source.Username
	dbsqlxUser.Password = source.Password
	dbsqlxUser.Role = string(source.Role)
	return dbsqlxUser
}
