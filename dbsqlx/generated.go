// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package dbsqlx

import game "github.com/sirgwain/craig-stars/game"

type GameConverter struct{}

func (c *GameConverter) ConvertGame(source Game) game.Game {
	var gameGame game.Game
	gameGame.ID = source.ID
	gameGame.CreatedAt = TimeToTime(source.CreatedAt)
	gameGame.UpdatedAt = TimeToTime(source.UpdatedAt)
	gameGame.Name = source.Name
	gameGame.HostID = source.HostID
	gameGame.QuickStartTurns = source.QuickStartTurns
	gameGame.Size = game.Size(source.Size)
	gameGame.Density = game.Density(source.Density)
	gameGame.PlayerPositions = game.PlayerPositions(source.PlayerPositions)
	gameGame.RandomEvents = source.RandomEvents
	gameGame.ComputerPlayersFormAlliances = source.ComputerPlayersFormAlliances
	gameGame.PublicPlayerScores = source.PublicPlayerScores
	gameGame.StartMode = game.GameStartMode(source.StartMode)
	gameGame.Year = source.Year
	gameGame.State = game.GameState(source.State)
	gameGame.OpenPlayerSlots = source.OpenPlayerSlots
	gameGame.NumPlayers = source.NumPlayers
	gameGame.VictoryConditions = ExtendVictoryConditions(source)
	gameGame.VictorDeclared = source.VictorDeclared
	gameGame.Rules = RulesToGameRules(source.Rules)
	gameGame.Area = ExtendArea(source)
	return gameGame
}
func (c *GameConverter) ConvertGameGame(source *game.Game) *Game {
	var pDbsqlxGame *Game
	if source != nil {
		dbsqlxGame := c.gameGameToDbsqlxGame(*source)
		pDbsqlxGame = &dbsqlxGame
	}
	return pDbsqlxGame
}
func (c *GameConverter) ConvertGameRace(source *game.Race) *Race {
	var pDbsqlxRace *Race
	if source != nil {
		dbsqlxRace := c.gameRaceToDbsqlxRace(*source)
		pDbsqlxRace = &dbsqlxRace
	}
	return pDbsqlxRace
}
func (c *GameConverter) ConvertGameUser(source *game.User) *User {
	var pDbsqlxUser *User
	if source != nil {
		dbsqlxUser := c.gameUserToDbsqlxUser(*source)
		pDbsqlxUser = &dbsqlxUser
	}
	return pDbsqlxUser
}
func (c *GameConverter) ConvertGames(source []Game) []game.Game {
	gameGameList := make([]game.Game, len(source))
	for i := 0; i < len(source); i++ {
		gameGameList[i] = c.ConvertGame(source[i])
	}
	return gameGameList
}
func (c *GameConverter) ConvertRace(source Race) game.Race {
	var gameRace game.Race
	gameRace.ID = source.ID
	gameRace.CreatedAt = TimeToTime(source.CreatedAt)
	gameRace.UpdatedAt = TimeToTime(source.UpdatedAt)
	gameRace.UserID = source.UserID
	var pInt64 *int64
	if source.PlayerID != nil {
		xint64 := *source.PlayerID
		pInt64 = &xint64
	}
	gameRace.PlayerID = pInt64
	gameRace.Name = source.Name
	gameRace.PluralName = source.PluralName
	gameRace.PRT = game.PRT(source.PRT)
	gameRace.LRTs = game.Bitmask(source.LRTs)
	gameRace.HabLow = ExtendHabLow(source)
	gameRace.HabHigh = ExtendHabHigh(source)
	gameRace.GrowthRate = source.GrowthRate
	gameRace.PopEfficiency = source.PopEfficiency
	gameRace.FactoryOutput = source.FactoryOutput
	gameRace.FactoryCost = source.FactoryCost
	gameRace.NumFactories = source.NumFactories
	gameRace.FactoriesCostLess = source.FactoriesCostLess
	gameRace.ImmuneGrav = source.ImmuneGrav
	gameRace.ImmuneTemp = source.ImmuneTemp
	gameRace.ImmuneRad = source.ImmuneRad
	gameRace.MineOutput = source.MineOutput
	gameRace.MineCost = source.MineCost
	gameRace.NumMines = source.NumMines
	gameRace.ResearchCost = ExtendResearchCost(source)
	gameRace.TechsStartHigh = source.TechsStartHigh
	gameRace.Spec = RaceSpecToGameRaceSpec(source.Spec)
	return gameRace
}
func (c *GameConverter) ConvertRaces(source []Race) []game.Race {
	gameRaceList := make([]game.Race, len(source))
	for i := 0; i < len(source); i++ {
		gameRaceList[i] = c.ConvertRace(source[i])
	}
	return gameRaceList
}
func (c *GameConverter) ConvertUser(source User) game.User {
	var gameUser game.User
	gameUser.ID = source.ID
	gameUser.CreatedAt = TimeToTime(source.CreatedAt)
	gameUser.UpdatedAt = TimeToTime(source.UpdatedAt)
	gameUser.Username = source.Username
	gameUser.Password = source.Password
	gameUser.Role = game.Role(source.Role)
	return gameUser
}
func (c *GameConverter) ConvertUsers(source []User) []game.User {
	gameUserList := make([]game.User, len(source))
	for i := 0; i < len(source); i++ {
		gameUserList[i] = c.ConvertUser(source[i])
	}
	return gameUserList
}
func (c *GameConverter) gameGameToDbsqlxGame(source game.Game) Game {
	var dbsqlxGame Game
	dbsqlxGame.ID = source.ID
	dbsqlxGame.CreatedAt = TimeToTime(source.CreatedAt)
	dbsqlxGame.UpdatedAt = TimeToTime(source.UpdatedAt)
	dbsqlxGame.Name = source.Name
	dbsqlxGame.HostID = source.HostID
	dbsqlxGame.QuickStartTurns = source.QuickStartTurns
	dbsqlxGame.Size = game.Size(source.Size)
	dbsqlxGame.Density = game.Density(source.Density)
	dbsqlxGame.PlayerPositions = game.PlayerPositions(source.PlayerPositions)
	dbsqlxGame.RandomEvents = source.RandomEvents
	dbsqlxGame.ComputerPlayersFormAlliances = source.ComputerPlayersFormAlliances
	dbsqlxGame.PublicPlayerScores = source.PublicPlayerScores
	dbsqlxGame.StartMode = game.GameStartMode(source.StartMode)
	dbsqlxGame.Year = source.Year
	dbsqlxGame.State = game.GameState(source.State)
	dbsqlxGame.OpenPlayerSlots = source.OpenPlayerSlots
	dbsqlxGame.NumPlayers = source.NumPlayers
	dbsqlxGame.VictoryConditionsConditions = c.gameVictoryConditionListToDbsqlxVictoryConditions(source.VictoryConditions.Conditions)
	dbsqlxGame.VictoryConditionsNumCriteriaRequired = source.VictoryConditions.NumCriteriaRequired
	dbsqlxGame.VictoryConditionsYearsPassed = source.VictoryConditions.YearsPassed
	dbsqlxGame.VictoryConditionsOwnPlanets = source.VictoryConditions.OwnPlanets
	dbsqlxGame.VictoryConditionsAttainTechLevel = source.VictoryConditions.AttainTechLevel
	dbsqlxGame.VictoryConditionsAttainTechLevelNumFields = source.VictoryConditions.AttainTechLevelNumFields
	dbsqlxGame.VictoryConditionsExceedsScore = source.VictoryConditions.ExceedsScore
	dbsqlxGame.VictoryConditionsExceedsSecondPlaceScore = source.VictoryConditions.ExceedsSecondPlaceScore
	dbsqlxGame.VictoryConditionsProductionCapacity = source.VictoryConditions.ProductionCapacity
	dbsqlxGame.VictoryConditionsOwnCapitalShips = source.VictoryConditions.OwnCapitalShips
	dbsqlxGame.VictoryConditionsHighestScoreAfterYears = source.VictoryConditions.HighestScoreAfterYears
	dbsqlxGame.VictorDeclared = source.VictorDeclared
	dbsqlxGame.Rules = GameRulesToRules(source.Rules)
	dbsqlxGame.AreaX = source.Area.X
	dbsqlxGame.AreaY = source.Area.Y
	return dbsqlxGame
}
func (c *GameConverter) gameRaceToDbsqlxRace(source game.Race) Race {
	var dbsqlxRace Race
	dbsqlxRace.ID = source.ID
	dbsqlxRace.CreatedAt = TimeToTime(source.CreatedAt)
	dbsqlxRace.UpdatedAt = TimeToTime(source.UpdatedAt)
	dbsqlxRace.UserID = source.UserID
	var pInt64 *int64
	if source.PlayerID != nil {
		xint64 := *source.PlayerID
		pInt64 = &xint64
	}
	dbsqlxRace.PlayerID = pInt64
	dbsqlxRace.Name = source.Name
	dbsqlxRace.PluralName = source.PluralName
	dbsqlxRace.PRT = game.PRT(source.PRT)
	dbsqlxRace.LRTs = game.Bitmask(source.LRTs)
	dbsqlxRace.HabLowGrav = source.HabLow.Grav
	dbsqlxRace.HabLowTemp = source.HabLow.Temp
	dbsqlxRace.HabLowRad = source.HabLow.Rad
	dbsqlxRace.HabHighGrav = source.HabHigh.Grav
	dbsqlxRace.HabHighTemp = source.HabHigh.Temp
	dbsqlxRace.HabHighRad = source.HabHigh.Rad
	dbsqlxRace.GrowthRate = source.GrowthRate
	dbsqlxRace.PopEfficiency = source.PopEfficiency
	dbsqlxRace.FactoryOutput = source.FactoryOutput
	dbsqlxRace.FactoryCost = source.FactoryCost
	dbsqlxRace.NumFactories = source.NumFactories
	dbsqlxRace.FactoriesCostLess = source.FactoriesCostLess
	dbsqlxRace.ImmuneGrav = source.ImmuneGrav
	dbsqlxRace.ImmuneTemp = source.ImmuneTemp
	dbsqlxRace.ImmuneRad = source.ImmuneRad
	dbsqlxRace.MineOutput = source.MineOutput
	dbsqlxRace.MineCost = source.MineCost
	dbsqlxRace.NumMines = source.NumMines
	dbsqlxRace.ResearchCostEnergy = game.ResearchCostLevel(source.ResearchCost.Energy)
	dbsqlxRace.ResearchCostWeapons = game.ResearchCostLevel(source.ResearchCost.Weapons)
	dbsqlxRace.ResearchCostPropulsion = game.ResearchCostLevel(source.ResearchCost.Propulsion)
	dbsqlxRace.ResearchCostConstruction = game.ResearchCostLevel(source.ResearchCost.Construction)
	dbsqlxRace.ResearchCostElectronics = game.ResearchCostLevel(source.ResearchCost.Electronics)
	dbsqlxRace.ResearchCostBiotechnology = game.ResearchCostLevel(source.ResearchCost.Biotechnology)
	dbsqlxRace.TechsStartHigh = source.TechsStartHigh
	dbsqlxRace.Spec = GameRaceSpecToRaceSpec(source.Spec)
	return dbsqlxRace
}
func (c *GameConverter) gameUserToDbsqlxUser(source game.User) User {
	var dbsqlxUser User
	dbsqlxUser.ID = source.ID
	dbsqlxUser.CreatedAt = TimeToTime(source.CreatedAt)
	dbsqlxUser.UpdatedAt = TimeToTime(source.UpdatedAt)
	dbsqlxUser.Username = source.Username
	dbsqlxUser.Password = source.Password
	dbsqlxUser.Role = string(source.Role)
	return dbsqlxUser
}
func (c *GameConverter) gameVictoryConditionListToDbsqlxVictoryConditions(source []game.VictoryCondition) VictoryConditions {
	dbsqlxVictoryConditions := make(VictoryConditions, len(source))
	for i := 0; i < len(source); i++ {
		dbsqlxVictoryConditions[i] = game.VictoryCondition(source[i])
	}
	return dbsqlxVictoryConditions
}
