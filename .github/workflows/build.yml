name: Build
on: 
  push:
    branches:
      - 'develop'
jobs:
  build:
    strategy:
      matrix:
        go-version: [1.18.x]
        node-version: [18]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      # run server tests (this is fast)
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true
          cache: true
      - run: mkdir -p frontend/build
      - run: touch frontend/build/testfile
      - run: go test ./...          
      - run: rm -rf frontend/build

      # build the frontend (this is slow)
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      - run: yarn --cwd frontend install
      - run: yarn --cwd frontend run build
      - run: mkdir -p dist/
      - run: tar -cvf ./dist/frontend.tgz -C frontend/build .

      # build the binary (this embeds the frontend built above)
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true
          cache: true
      - run: mkdir -p dist/
      - run: go mod tidy && CGO_ENABLED=1 GOARCH=amd64 GOOS=linux go build -ldflags='-s -w -extldflags "-static"' -o dist/craig-stars main.go
      - run: tar -cvf ./dist/craig-stars.tgz -C ./dist ./craig-stars

      - uses: actions/upload-artifact@v3
        with:
          name: dist-artifact
          path: ./dist/
          retention-days: 1

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create latest Release
        id: create_release
        uses: ncipollo/release-action@v1.8.10
        with:
          name: latest
          tag: latest
          body: ""
          prerelease: true
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

  upload:
    name: Upload
    runs-on: ubuntu-latest
    needs: release
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist-artifact
          path: ./dist/
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ./dist/

      # upload the front end
      - name: Upload Release Assets - Server
        id: upload-release-asset-server
        uses: WebFreak001/deploy-nightly@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # automatically provided by github actions
        with:
          upload_url: ${{ needs.release.outputs.release_upload_url }}
          release_id: ${{ needs.release.outputs.release_id }}
          asset_path: ./dist/frontend.tgz
          asset_name: frontend.tgz
          asset_content_type: application/zip
          max_releases: 5

      # upload the server
      - name: Upload Release Assets - Server
        id: upload-release-asset
        uses: WebFreak001/deploy-nightly@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # automatically provided by github actions
        with:
          upload_url: ${{ needs.release.outputs.release_upload_url }}
          release_id: ${{ needs.release.outputs.release_id }}
          asset_path: ./dist/craig-stars.tgz
          asset_name: craig-stars.tgz
          asset_content_type: application/zip
          max_releases: 5
